import cv2
import numpy as np
def mock_predict(image):
    # Placeholder logic: Randomly predict ASD or No ASD
    # In practice, replace this with the actual model prediction
    return np.random.choice(["ASD Detected", "No ASD"], p=[0.5, 0.5])

# Preprocess the input image
def preprocess_image(image_path):
    img = cv2.imread(image_path)  # Load image
    if img is None:
        raise FileNotFoundError(f"Image not found: {image_path}")
    
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert to RGB
    img = cv2.resize(img, (224, 224))  # Resize to a standard size (use the size that fits your model)
    img = img / 255.0  # Normalize pixel values
    return img

# Simulate ASD detection based on image input
def detect_asd(image_path):
    img = preprocess_image(image_path)
    label = mock_predict(img)  # Simulate the prediction process
    return label

# Main execution
if __name__ == "__main__":
    input_image = r"C:\Users\yugan\Downloads\image.jpeg"  # Update with your image path
    try:
        label = detect_asd(input_image)
        print(f"Prediction: {label}")
    except FileNotFoundError as e:
        print(e)
